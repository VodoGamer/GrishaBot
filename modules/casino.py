import asyncio
from vkbottle.bot import Blueprint, Message
from modules.models import User, Casino, CasinoUser, Settings


bp = Blueprint("Casino")


@bp.on.chat_message(regex=("(?i)^(\d*)\s*?(–∫|—á|–∑)$"))
async def new_bet(message: Message, match):
    settings = Settings(message.peer_id)
    if settings.get_value("casino")[0] == "False":
        await message.reply("–ö–∞–∑–∏–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —ç—Ç–æ–≥–æ —á–∞—Ç–∞!")
        return
    user = User(message.peer_id, message.from_id)
    casino_user = CasinoUser(message.peer_id, message.from_id)
    if int(match[0]) <= 0:
        await message.reply("–ò–¥–∏ –Ω–∞—Ö—É–π!")
        return
    if user.money >= int(match[0]):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        casino_user_check = casino_user.check()
        if not casino_user_check:  # –ù–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —é–∑–µ—Ä
            casino_user.register_bet(
                int(match[0]),
                await convert_text_to_emoji(match[1]))

            user.change_money(-int(match[0]))
            await message.reply("–°—Ç–∞–≤–∫–∞ –∑–∞—â–∏—Ç–∞–Ω–∞!")
        else:
            await message.reply(f"–í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {casino_user_check[2]} "
                                f"–Ω–∞ {casino_user_check[3]}")
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!")


@bp.on.chat_message(regex=("(?i)^–≥–æ$"))
async def twist(message: Message):
    settings = Settings(message.peer_id)
    if settings.get_value("casino")[0] == "False":
        await message.reply("–ö–∞–∑–∏–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —ç—Ç–æ–≥–æ —á–∞—Ç–∞!")
        return
    casino = Casino(message.peer_id)
    casino_users = casino.get_users()
    casino_money = casino.get_all_money()
    if casino_users == []:
        await message.reply("–ù–∏–∫—Ç–æ –Ω–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç –≤ –∫–∞–∑–∏–Ω–æ!")
        return

    casino_users_mentions = []
    for casino_user in casino_users:
        casino_users_mentions.append(
            await User(message.peer_id, casino_user[1]).get_mention())

    await message.answer("–í –∫–∞–∑–∏–Ω–æ —É—á–∞–≤—Å—Ç–≤—É—é—Ç:\n"
                         "{}".format('\n'.join(casino_users_mentions)))

    winner_feature = casino.get_winner_feature()
    winner_users = casino.get_winner_users(winner_feature)
    if winner_users != []:
        winner_cash = round(casino_money / len(winner_users) * 1.1)

    winner_users_mention = []
    for winner_user in winner_users:
        winner_user = User(message.peer_id, winner_user)
        winner_users_mention.append(await winner_user.get_mention())
        winner_user.change_money(winner_cash)

    casino.delete_all()

    await message.answer("üé≤| –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫–∏")
    await asyncio.sleep(3)
    if winner_users_mention == []:
        await message.answer(f"–í—ã–ø–∞–ª–æ {winner_feature}.\n–ù–∏–∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª.")
        return
    await message.answer(f"–í—ã–ø–∞–ª–æ {winner_feature}.\n"
                         "{}"
                         f"\n–ø–æ–ª—É—á–∏–ª–∏ {winner_cash}"
                         "".format('\n'.join(winner_users_mention)))


async def convert_text_to_emoji(text: str):
    if text.lower() == "–∫":
        return "üî¥"
    elif text.lower() == "—á":
        return "‚ö´Ô∏è"
    elif text.lower() == "–∑":
        return "üçÄ"
