from vkbottle import Keyboard, Text
from vkbottle.bot import Blueprint, Message
from vkbottle.dispatch.rules.base import RegexRule, ReplyMessageRule
import modules.models as models


bp = Blueprint("Sex")


@bp.on.chat_message(RegexRule("(?i)—Å–µ–∫—Å|–ø–æ—Å–µ–∫—Å–∏–º"), ReplyMessageRule())
async def new_sex_request(message: Message):
    from_user = models.User(message.peer_id, message.from_id)
    to_user = models.User(message.peer_id, message.reply_message.from_id)
    if to_user.user_id > 0:
        sex = models.Sex(message.peer_id, from_user.user_id)
        if not sex.get_send():
            if not sex.get_request():
                sex.start(to_user.user_id)
                KEYBOARD = Keyboard(inline=True)
                KEYBOARD.add(Text("–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è", payload={
                            "sex": "agree"}))
                KEYBOARD.add(Text("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", payload={
                            "sex": "disagree"}))
                await message.answer(f"{await from_user.get_mention()} "
                                     "–ø—Ä–µ–¥–ª–æ–∂–∏–ª –ø–æ–Ω—è—à–∏—Ç—å—Å—è "
                                     f"{await to_user.get_mention('datv')}",
                                    keyboard=KEYBOARD)
            else:
                await message.answer(f"–£ {await to_user.get_mention('gent')} "
                                     "–µ—Å—Ç—å –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–π —Å–µ–∫—Å\n–ü–æ–ø—Ä–æ—Å–∏ –µ–≥–æ "
                                     "–ø–æ—Å–∫–æ—Ä–µ–µ –ø–æ—Ç—Ä–∞—Ö–∞—Ç—å—Å—è")
        else:
            await message.reply("–£ —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–π —Å–µ–∫—Å\n–ß—Ç–æ–±—ã "
                                "–∑–∞–∫–æ–Ω—á–∏—Ç—å –µ–≥–æ –Ω–∞–ø–∏—à–∏ -—Å–µ–∫—Å")
    else:
        await message.answer(f"{await from_user.get_mention()} —ë–±–Ω—É–ª—Å—è –∏ "
                             "–Ω–∞—á–∞–ª –µ–±–∞—Ç—å –±–æ—Ç–∞ "
                             f"{await to_user.get_mention('gent')}üë≥‚Äç‚ôÇÔ∏è")


@bp.on.chat_message(payload={"sex": "agree"})
async def sex_agree(message: Message):
    pass


@bp.on.chat_message(payload={"sex": "disagree"})
async def sex_disagree(message: Message):
    from_user = models.User(message.peer_id, message.from_id)
    sex = models.Sex(message.peer_id, from_user.user_id)
    requset = sex.get_request()
    send = sex.get_send()
    if requset is None and send is None:
        return
    elif requset is None:
        partner = send
        sex.end_sex(partner)
    else:
        partner = requset
        sex.discard_sex()

    partner_info = models.User(message.peer_id, partner)
    print(await from_user.get_sex())
    if await from_user.get_sex() == 1:
        await message.answer(f"{await from_user.get_mention()} –æ—Ç–∫–∞–∑–∞–ª–∞—Å—å "
                             "–æ—Ç —Å–µ–∫—Å–∞ —Å "
                             f"{await partner_info.get_mention('ablt')}")
    else:
        await message.answer(f"{await from_user.get_mention()} –æ—Ç–∫–∞–∑–∞–ª—Å—è "
                             "–æ—Ç —Å–µ–∫—Å–∞ —Å "
                             f"{await partner_info.get_mention('ablt')}")


@bp.on.chat_message(RegexRule("(?i)-—Å–µ–∫—Å"))
async def discard_sex_request(message: Message):
    from_user = models.User(message.peer_id, message.from_id)
    sex = models.Sex(message.peer_id, from_user.user_id)
    try:
        sex.discard_sex()
        sex.end_sex(sex.get_send())
        await message.reply(f"{await from_user.get_mention()} "
                            "–∑–∞–≤–µ—Ä—à–∏–ª –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–∫—Å")
    except:
        await message.reply(f"–¢—ã —Å–æ–±—Ä–∞–ª—Å—è –∑–∞–≤–µ—Ä—à–∞—Ç—å —Ç–æ, —á–µ–≥–æ –Ω–µ—Ç?")

