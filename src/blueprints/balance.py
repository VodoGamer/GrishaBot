from datetime import datetime, timedelta
from random import randint

from pytz import UTC
from vkbottle.bot import Blueprint, Message
from vkbottle.dispatch.rules.base import ReplyMessageRule

from src.db.models import Chat, User
from src.repository.account import (Case, TopType, is_command_available,
                                    get_mention, get_top_list)

bp = Blueprint("Balance")


@bp.on.chat_message(regex=(r"(?i)^\.*\s*–±(–∞–ª–∞–Ω—Å)?$"))
async def get_balance(message: Message, user: User):
    await message.reply(f"–ë–∞–ª–∞–Ω—Å "
                        f"{await get_mention(user, Case.GENITIVE)} "
                        f"–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {user.money} üíµ",
                        disable_mentions=True)


@bp.on.chat_message(regex=(r"(?i)^\.*\s*–±–æ–Ω—É—Å$"))
async def get_bonus(message: Message, user: User):
    bonus = randint(100, 200)
    cooldown = is_command_available(user.last_bonus_use, timedelta(hours=6))

    if cooldown:
        await message.reply(
            f"‚ùå | –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ {cooldown}")
        return
    user.money += bonus
    user.last_bonus_use = datetime.now(tz=UTC)
    await user.save()

    await message.reply(f"{await get_mention(user)} –ø–æ–ª—É—á–∏–ª {bonus} üíµ",
                        disable_mentions=True)


@bp.on.chat_message(
    ReplyMessageRule(),
    regex=(r"(?i)^\.*\s*(?:(?:–ø–µ—Ä–µ)?–¥–∞—Ç—å|–ø–æ–¥–∞—Ä–∏—Ç—å)\s*(\d+)$"))
async def send_money(message: Message, match, user: User, chat: Chat):
    reply_user = await User.get(
        id=message.reply_message.from_id,  # type: ignore
        chat=chat)
    transferred_money = int(match[0])

    if user.money < transferred_money:
        await message.reply("‚ùå | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!")
        return
    if user.uid != reply_user.uid:
        user.money -= transferred_money
        await user.save()

        reply_user.money += transferred_money
        await reply_user.save()

    await message.answer(
        f"{await get_mention(user)} "
        f"–ø–µ—Ä–µ–¥–∞–ª {transferred_money} üíµ "
        f"{await get_mention(reply_user, Case.DATIVE)}",
        disable_mentions=True
    )


@bp.on.chat_message(
    regex=(r"(?i)^\.*\s*(—Å–ø–∏—Å–æ–∫|–ª–∏—Å—Ç|—Ç–æ–ø)\s*(—Ñ–æ—Ä–±—Å|forbes|–±–æ–≥–∞—á–µ–π|–¥–µ–Ω–µ–≥)$"))
async def get_forbes_list(message: Message, chat: Chat):
    forbes_list = await User.filter(chat=chat).exclude(money=0)\
        .order_by('-money')
    top = await get_top_list(forbes_list, TopType.money)

    if top:
        await message.answer(f"–°–ø–∏—Å–æ–∫ Forbes —ç—Ç–æ–π –±–µ—Å–µ–¥—ã:\n {top}",
                             disable_mentions=True)
    else:
        await message.reply("–±–µ—Å–µ–¥–∞ –±–æ–º–∂–µ–π :)")
