import asyncio
import json
from random import choice, randint

from vkbottle import Keyboard, Text
from vkbottle.bot import Blueprint, Message
from vkbottle.dispatch.rules.base import ReplyMessageRule

from src.db.models import Chat, User
from src.repository.account import Case, get_mention

bp = Blueprint("sex")
bp.labeler.vbml_ignore_case = True


@bp.on.chat_message(ReplyMessageRule(), text=("—Å–µ–∫—Å", "–ø–æ—Å–µ–∫—Å–∏–º"))
async def new_sex_request(message: Message, chat: Chat, user: User):
    reply_id = message.reply_message.from_id  # type: ignore

    KEYBOARD = Keyboard(inline=True)

    KEYBOARD.add(Text("–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è", payload={"sex_agree": f"{user.uid}_{reply_id}"}))
    KEYBOARD.add(Text("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", payload={"sex_disagree": f"{user.uid}_{reply_id}"}))

    to_user = await User.get(chat_id=chat.id, uid=reply_id)
    await message.answer(
        f"{await get_mention(user)} –ø—Ä–µ–¥–ª–æ–∂–∏–ª "
        f"–ø–æ–Ω—è—à–∏—Ç—å—Å—è {await get_mention(to_user, Case.DATIVE)}",
        keyboard=KEYBOARD.get_json(),
        disable_mentions=True,
    )


@bp.on.chat_message(payload_map={"sex_agree": str})
async def sex_agree(message: Message, chat: Chat):
    payload = json.loads(message.payload)["sex_agree"]  # type: ignore
    payloads = str(payload).split("_")
    from_id = payloads[0]
    to_id = payloads[1]

    if message.from_id != int(to_id):
        return

    # Inits
    sex_sender = await User.get(chat_id=chat.id, uid=from_id)
    sex_recipient = await User.get(chat_id=chat.id, uid=to_id)

    words = [
        "–ø–æ–Ω—è—à–∏—Ç—å—Å—èüòä",
        "–≤ –∫—Ä–æ–≤–∞—Ç—åüõè",
        "–≤ –ø–æ—Å—Ç–µ–ª—åüõè",
        "–ø–æ—Ç—Ä–∞—Ö–∞—Ç—å—Å—èüîû",
        "–ø–æ—Ä–≤–∞—Ç—å –ø–æ–ø–∫—Éüòñ",
        "–ø–æ—Ä–≤–∞—Ç—å –ø–∏–∑–¥—Éüòñ",
    ]
    await message.answer(
        f"{await get_mention(sex_sender)} —Å–æ–±–ª–∞–∑–Ω–∏–ª "
        f"{await get_mention(sex_recipient, Case.ACCUSATIVE)} "
        f"{choice(words)}",
        disable_mentions=True,
    )
    await asyncio.sleep(2)
    if randint(1, 3) == 1:
        await message.answer(
            f"{await get_mention(sex_sender)} –∏ "
            f"{await get_mention(sex_recipient)} "
            "–Ω–∞—á–∞–ª–∏ —Ä–∞–∑–¥–µ–≤–∞—Ç—å—Å—è",
            disable_mentions=True,
        )
    else:
        words = ["–Ω–∞—á–∞–ª —Å–Ω–∏–º–∞—Ç—å –æ–¥–µ–∂–¥—Éüëô —Å", "–Ω–∞—á–∞–ª —Ä–∞–∑—Ä—ã–≤–∞—Ç—å –æ–¥–µ–∂–¥—Éüëô"]
        await message.answer(
            f"{await get_mention(sex_sender)} "
            f"{choice(words)} "
            f"{await get_mention(sex_recipient, Case.ACCUSATIVE)}",
            disable_mentions=True,
        )
    await asyncio.sleep(3)
    await message.answer(
        f"–ü–æ—Å–ª–µ –¥–æ–ª–≥–∏—Ö —Ä–∞–∑–¥—É–º–∏–π "
        f"{await get_mention(sex_sender)} –∏ "
        f"{await get_mention(sex_recipient)} "
        f"–≤—ã–±—Ä–∞–ª–∏ —Å–µ–∫—Å –≤ –ø–æ–∑–µ {randint(1, 100)}",
        "photo-194020282_457239082",
        disable_mentions=True,
    )
    await asyncio.sleep(3)
    words = [
        "–Ω–æ–≥–∏ü¶µ",
        "–Ω–æ–∂–∫–∏ü¶µ",
        "—É—Ö–æüëÇ",
        "–Ω–æ—ÅüëÉ",
        "–ø—è—Ç–∫–∏ü¶∂",
        "—Å–æ—Å–æ–∫üîû",
        "—Å–∏—Å—å–∫–∏üîû",
        "—Ä—É–∫–∏üñê",
        "–ø–∏–∑–¥—Éüîû",
        "—á–ª–µ–Ωüîû",
        "–∞–Ω–∞–ª—å–Ω—É—é –¥—ã—Ä–æ—á–∫—Éüîû",
        "–ª–∞–¥–æ—à–∫—Éüñê",
    ]
    await message.answer(
        f"{await get_mention(sex_sender)} –æ–±–ª–∏–∑–∞–ª "
        f"{choice(words)} "
        f"{await get_mention(sex_recipient, Case.GENITIVE)}",
        disable_mentions=True,
    )
    await asyncio.sleep(2)
    if randint(1, 4) == 1:
        await message.answer(
            f"{await get_mention(sex_sender)} –¥–µ–ª–∞–µ—Ç "
            "–Ω–µ–∂–Ω—ã–π –∫—É–Ω–∏–ª–∏–Ω–≥—É—Å "
            f"{await get_mention(sex_recipient, Case.DATIVE)}",
            disable_mentions=True,
        )
    else:
        await message.answer(
            f"{await get_mention(sex_recipient)} –¥–µ–ª–∞–µ—Ç "
            "–º–∏–Ω–µ—Ç "
            f"{await get_mention(sex_sender, Case.DATIVE)}",
            disable_mentions=True,
        )
    await asyncio.sleep(2)
    await message.answer(
        f"{await get_mention(sex_sender)} "
        f"–≤—Å—Ç–∞–≤–∏–ª —Å–≤–æ–∏ {sex_sender.dick_size} "
        f"—Å–º –≤ {await get_mention(sex_recipient, Case.GENITIVE)} üòñ",
        disable_mentions=True,
    )
    await asyncio.sleep(3)
    if randint(1, 5) != 1:
        words = ["–ø–æ–ø–∫—É", "–ø–∏—Å–µ—á–∫—É", "–ø–∏–∑–¥—É"]
        await message.answer(
            f"{await get_mention(sex_sender)} "
            f"–ø–æ—Ä–≤–∞–ª {choice(words)} "
            f"{await get_mention(sex_recipient, Case.GENITIVE)} üòñ",
            disable_mentions=True,
        )
        return
    await message.answer(
        f"{await get_mention(sex_sender)} "
        "–∫–æ–Ω—á–∏–ª –≤ "
        f"{await get_mention(sex_recipient, Case.ACCUSATIVE)} üò≥",
        disable_mentions=True,
    )
    if randint(1, 2) == 1:
        await message.answer(
            f"–£ {await get_mention(sex_sender, Case.GENITIVE)} "
            f"–∏ {await get_mention(sex_recipient, Case.GENITIVE)} "
            "–ø–æ—è–≤–∏–ª—Å—è —Ä–µ–±—ë–Ω–æ–∫ üò≥",
            disable_mentions=True,
        )


@bp.on.chat_message(payload_map={"sex_disagree": str})
async def sex_disagree(message: Message, user: User, chat: Chat):
    payload = json.loads(message.payload)["sex_disagree"]  # type: ignore
    payloads = str(payload).split("_")
    from_id = payloads[0]
    to_id = payloads[1]

    if message.from_id != int(to_id):
        return

    to_user = user
    from_user = await User.get(chat_id=chat.id, uid=from_id)

    await message.answer(
        f"{await get_mention(to_user)} –æ—Ç–∫–∞–∑–∞–ª –≤ —Å–µ–∫—Å–µ –∫–æ—Ç–æ—Ä—ã–π –µ–º—É "
        f"–ø—Ä–µ–¥–ª–æ–∂–∏–ª(–∞) {await get_mention(from_user)}",
        disable_mentions=True,
    )
